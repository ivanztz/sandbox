apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-service-account

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: adminer
  name: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      serviceAccountName: postgres-service-account
      containers:
        - image: adminer
          name: adminer
          ports:
            - containerPort: 8080
          resources: { }
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: adminer
  name: adminer
spec:
  ports:
    - name: "8080"
      port: 8080
  selector:
    app: adminer
  type: LoadBalancer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      serviceAccountName: postgres-service-account
      containers:
        - envFrom:
            - configMapRef:
                name: postgres-config
          image: postgres:14.2
          name: postgres
          ports:
            - containerPort: 5432
          resources: { }
      restartPolicy: Always
      volumes:
        - name: postgres-claim0
          persistentVolumeClaim:
            claimName: postgres-claim0
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  POSTGRES_DB: 'objects'
  POSTGRES_PASSWORD: 'password'
  POSTGRES_USER: 'admin'

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  ports:
    - name: "5432"
      port: 5432
  selector:
    app: postgres
  type: LoadBalancer
      


