# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Values.appName | default .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerPorts }}
          ports:
            {{- range .Values.containerPorts }}
            - name: {{ .name }}
              containerPort: {{ .port }}
              protocol: {{ .protocol | default "TCP" }}
            {{- end }}
          {{- end }}
          envFrom:
          {{- if .Values.configMap.create }}
          {{- if .Values.configMap.data }} # Ensure data exists before adding to envFrom
          - configMapRef:
              name: {{ include "chart.configMapName" . }}
          {{- end }}
          {{- end }}
          {{- if .Values.secret.create }}
          {{- if .Values.secret.stringData }} # Ensure stringData exists before adding to envFrom
          - secretRef:
              name: {{ include "chart.secretName" . }}
          {{- end }}
          {{- end }}
          env:
            # Predefined environment variables for pod name and namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          # User-defined direct environment variables from a map
          {{- range $name, $value := .Values.env }}
          - name: {{ $name }}
            value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if .Values.livenessProbe.httpGet }}
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
              {{- if .Values.livenessProbe.httpGet.scheme }}
              scheme: {{ .Values.livenessProbe.httpGet.scheme }}
              {{- end }}
              {{- if .Values.livenessProbe.httpGet.httpHeaders }}
              httpHeaders:
                {{- toYaml .Values.livenessProbe.httpGet.httpHeaders | nindent 14 }}
              {{- end }}
            {{- else if .Values.livenessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.livenessProbe.tcpSocket.port }}
              {{- if .Values.livenessProbe.tcpSocket.host }}
              host: {{ .Values.livenessProbe.tcpSocket.host }}
              {{- end }}
            {{- else if .Values.livenessProbe.exec }}
            exec:
              command:
                {{- toYaml .Values.livenessProbe.exec.command | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if .Values.readinessProbe.httpGet }}
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
              {{- if .Values.readinessProbe.httpGet.scheme }}
              scheme: {{ .Values.readinessProbe.httpGet.scheme }}
              {{- end }}
              {{- if .Values.readinessProbe.httpGet.httpHeaders }}
              httpHeaders:
                {{- toYaml .Values.readinessProbe.httpGet.httpHeaders | nindent 14 }}
              {{- end }}
            {{- else if .Values.readinessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.readinessProbe.tcpSocket.port }}
              {{- if .Values.readinessProbe.tcpSocket.host }}
              host: {{ .Values.readinessProbe.tcpSocket.host }}
              {{- end }}
            {{- else if .Values.readinessProbe.exec }}
            exec:
              command:
                {{- toYaml .Values.readinessProbe.exec.command | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
