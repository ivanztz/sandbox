apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-service-account
# Kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      serviceAccountName: kafka-service-account
      hostname: kafka #required to make advertised listeners work properly
      containers:
        - image: 'bitnami/kafka:3.3.2'
          name: kafka
          ports:
            - containerPort: 9092
          envFrom:
            - configMapRef:
                name: kafka-config
          resources: { }
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: kafka-claim0
      restartPolicy: Always
      volumes:
        - name: kafka-claim0
          persistentVolumeClaim:
            claimName: kafka-claim0

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: kafka-claim0
  name: kafka-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
data:
  KAFKA_BROKER_ID: '1'
  KAFKA_CFG_LISTENERS: 'CLIENT://:9092'
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CLIENT:PLAINTEXT'
  KAFKA_CFG_ADVERTISED_LISTENERS: 'CLIENT://kafka:9092'
  KAFKA_CFG_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  ALLOW_PLAINTEXT_LISTENER: 'yes'
  KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
  KAFKA_ADVERTISED_HOST_NAME: 'kafka'
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'CLIENT'

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  ports:
    - name: "9092"
      port: 9092
  selector:
    app: kafka
  type: LoadBalancer

# Zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      serviceAccountName: kafka-service-account
      containers:
        - image: 'bitnami/zookeeper:3.9.1'
          name: zookeeper
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: 'yes'
          ports:
            - containerPort: 2181
          resources: { }
      restartPolicy: Always
      volumes:
        - name: zookeeper-claim0
          persistentVolumeClaim:
            claimName: zookeeper-claim0
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zookeeper-claim0
  name: zookeeper-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  ports:
    - name: "2181"
      port: 2181
  selector:
    app: zookeeper
  type: LoadBalancer

# Kafka-UI
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka-ui
  name: kafka-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      serviceAccountName: kafka-service-account
      containers:
        - image: 'provectuslabs/kafka-ui:v0.7.1'
          name: kafka-ui
          envFrom:
            - configMapRef:
                name: kafka-ui-config
          ports:
            - containerPort: 8080
          resources: { }
      restartPolicy: Always
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-ui-config
data:
  KAFKA_CLUSTERS_0_NAME: 'local'
  KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9092'
  KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:2181'
  KAFKA_CLUSTERS_0_SCHEMAREGISTRY: 'http://schema-registry:8081'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-ui
  name: kafka-ui
spec:
  ports:
    - name: "8080"
      port: 8080
  selector:
    app: kafka-ui
  type: LoadBalancer

# Schema registry
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: schema-registry
  name: schema-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: schema-registry
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: schema-registry
    spec:
      serviceAccountName: kafka-service-account
      enableServiceLinks: false
      containers:
        - image: 'confluentinc/cp-schema-registry:7.5.3'
          name: schema-registry
          envFrom:
            - configMapRef:
                name: schema-registry-config
          ports:
            - containerPort: 8081
          resources: { }
      restartPolicy: Always
      volumes:
        - name: schema-registry-claim0
          persistentVolumeClaim:
            claimName: schema-registry-claim0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: schema-registry-config
data:
  SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
  SCHEMA_REGISTRY_HOST_NAME: localhost
  SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
  SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
  SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'

#---
#apiVersion: batch/v1
#kind: Job
#metadata:
#  labels:
#    app: schema-registry-provisioning
#  name: schema-registry-provisioning
#spec:
#  backoffLimit: 1
#  completions: 1
#  template:
#    spec:
#      serviceAccountName: kafka-service-account
#      containers:
#        - image: 'schema-registry-provisioning:latest'
#          imagePullPolicy: IfNotPresent # using local image from docker
#          name: schema-registry-provisioning
#          env:
#            - name: SCHEMA_REGISTRY
#              value: 'http://schema-registry:8081'
#      restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: schema-registry
  name: schema-registry
spec:
  ports:
    - name: "8081"
      port: 8081
  selector:
    app: schema-registry
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: schema-registry-claim0
  name: schema-registry-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
