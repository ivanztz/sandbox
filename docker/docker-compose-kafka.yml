version: "3.9"
services:
  zookeeper:
    image: 'bitnami/zookeeper:3.8.0'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
  kafka:
    image: 'bitnami/kafka:2.8.1'
    ports:
      - '9092:9092'
      - '9093:9093'
    restart: always
    environment:
      # without zookeper https://github.com/bitnami/bitnami-docker-kafka
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    networks:
      default:
        aliases:
          - kafka
    # persistent volume to survive container recreation
    volumes:
      - kafka-data:/bitnami/kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8092:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schemaregistry:8081
  schemaregistry:
    image: confluentinc/cp-schema-registry:7.3.0
    restart: always
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://schemaregistry:8081"
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
    ports:
      - "8081:8081"
    networks:
      default:
        aliases:
          - schemaregistry
  schemaregistry-provision:
    build: ./config/schema
    depends_on:
      - schemaregistry
    environment:
      SCHEMA_REGISTRY: "http://schemaregistry:8081"
    volumes:
      - ../object-api/src/main/resources/schema/avro:/etc/schema/import
      - ~/.m2:/etc/schema/.m2 #maven plugin dependencies
    networks:
      default:
networks:
  default:
    name: sandbox_default
volumes:
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local