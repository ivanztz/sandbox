# Object service
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: object-service
  name: object-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: object-service
  template:
    metadata:
      labels:
        app: object-service
      annotations:
        actuator.prometheus.io/scrape: 'true'
        actuator.prometheus.io/path: '/actuator/prometheus'
        actuator.prometheus.io/port: '8080'
        otel.prometheus.io/scrape: 'true'
        otel.prometheus.io/port: '9464'
    spec:
      containers:
        - image: object-service
          imagePullPolicy: IfNotPresent # using local image from docker
          name: object-service
          ports: # naming ports to be able to use different prometheus relabel rules for multiple metric endpoints
            - name: app
              containerPort: 8080
            - name: otel-metrics
              containerPort: 9464
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 15
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: 'service.instance.id=$(POD_NAME),service.namespace=$(POD_NAMESPACE)'
          envFrom:
            - configMapRef:
                name: object-service-config
            - secretRef:
                name: object-service-secrets
          resources: { }
      restartPolicy: Always

---
apiVersion: v1
kind: Secret
metadata:
  name: object-service-secrets
type: Opaque
stringData:
  server-name: 'postgres'
  database-port: '5432'
  database-name: 'objects'
  database-user: 'admin'
  database-password: 'password'
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: object-service-config
data:
  spring.kafka.bootstrap: 'kafka:9092'
  events-url: 'http://object-events:8080'
  keycloak.url: 'http://keycloak:8080'
  schemaregistry.url: 'http://schema-registry:8081'
  OTEL_TRACES_EXPORTER: otlp
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: 'http://otel-collector:4317'
  OTEL_SERVICE_NAME: object-service
  OTEL_METRICS_EXPORTER: prometheus
  #OTEL_TRACES_SAMPLER: sandbox_sampler
  #OTEL_TRACES_SAMPLER_ARG: '1.0'
  PYROSCOPE_APPLICATION_NAME: object-service
  PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: object-service
  name: object-service
spec:
  ports:
    - name: "8080"
      port: 8080
    - name: "9464"
      port: 9464
  selector:
    app: object-service
  type: LoadBalancer
# Object Events
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: object-events
  name: object-events
spec:
  replicas: 1
  selector:
    matchLabels:
      app: object-events
  template:
    metadata:
      labels:
        app: object-events
      annotations:
        actuator.prometheus.io/scrape: 'true'
        actuator.prometheus.io/path: '/actuator/prometheus'
        actuator.prometheus.io/port: '8080'
        otel.prometheus.io/scrape: 'true'
        otel.prometheus.io/port: '9464'
    spec:
      containers:
        - image: object-events
          imagePullPolicy: IfNotPresent # using local image from docker
          name: object-events
          ports:
            - name: app
              containerPort: 8080
            - name: otel-metrics
              containerPort: 9464
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 15
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: 'service.instance.id=$(POD_NAME),service.namespace=$(POD_NAMESPACE)'
          envFrom:
            - configMapRef:
                name: object-events-config
            - secretRef:
                name: object-events-secrets
          resources: { }
      restartPolicy: Always
---
apiVersion: v1
kind: Secret
metadata:
  name: object-events-secrets
type: Opaque
stringData:
  database-port: '27017'
  database-name: 'local'
  auth-database-name: 'admin'
  database-user: 'admin'
  database-password: 'password'

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: object-events-config
data:
  spring.kafka.bootstrap: 'kafka:9092'
  server-name: 'mongo'
  schemaregistry.url: 'http://schema-registry:8081'
  OTEL_TRACES_EXPORTER: otlp
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4317
  OTEL_SERVICE_NAME: object-events
  OTEL_METRICS_EXPORTER: prometheus
  #OTEL_TRACES_SAMPLER: sandbox_sampler
  #OTEL_TRACES_SAMPLER_ARG: '1.0'
  PYROSCOPE_APPLICATION_NAME: object-events
  PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: object-events
  name: object-events
spec:
  ports:
    - name: "8080"
      port: 8080
    - name: "9464"
      port: 9464
  selector:
    app: object-events
  type: LoadBalancer