apiVersion: v1
kind: ServiceAccount
metadata:
  name: tracing-service-account

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tracing
rules:
  - apiGroups: [ "" ]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources:
      - configmaps
    verbs: [ "get" ]
  - nonResourceURLs: [ "/metrics" ]
    verbs: [ "get" ]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tracing
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tracing
subjects:
  - kind: ServiceAccount
    name: tracing-service-account
    namespace: default
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jaeger
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      serviceAccountName: tracing-service-account
      containers:
        - image: 'jaegertracing/all-in-one:1.34'
          name: jaeger
          ports:
            - containerPort: 9411
            - containerPort: 14250
            - containerPort: 16686
          env:
            - name: SPAN_STORAGE_TYPE
              value: 'memory'
          resources: { }
      restartPolicy: Always
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: jaeger
  name: jaeger
spec:
  ports:
    - name: "9411"
      port: 9411
    - name: "14250"
      port: 14250
    - name: "16686"
      port: 16686
  selector:
    app: jaeger
  type: LoadBalancer

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: otel-collector
  name: otel-collector
spec:
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: tracing-service-account
      containers:
        - image: 'otel/opentelemetry-collector:0.63.1'
          name: otel-collector
          ports:
            - containerPort: 4317
            - containerPort: 9464
          args:
            - '--config=/conf/collector-config.yaml'
          resources: { }
          volumeMounts:
            - mountPath: /conf
              name: otel-config
      restartPolicy: Always
      volumes:
        - name: otel-config
          configMap:
            defaultMode: 420
            name: otel-config

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: otel-collector
  name: otel-collector
spec:
  ports:
    - name: "4317"
      port: 4317
    - name: "9464"
      port: 9464
  selector:
    app: otel-collector
  type: LoadBalancer

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-config
  labels:
    name: otel-config
data:
  collector-config.yaml: |-
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      prometheus:
        config:
          scrape_configs:
            - job_name: 'kubernetes-pods-actuator'
              scrape_interval: 5s
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [ __meta_kubernetes_pod_annotation_actuator_prometheus_io_scrape,__meta_kubernetes_pod_container_port_name]
                  separator: '@'
                  action: keep
                  regex: 'true@app' #checking scraping enabled for actuator and container port belongs to application
                - source_labels: [ __meta_kubernetes_pod_annotation_actuator_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                  # replacing __address__ with __instance__ for OTEL collector
                - source_labels: [ __instance__, __meta_kubernetes_pod_annotation_actuator_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__            
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                - source_labels: [ __meta_kubernetes_namespace ]
                  action: replace
                  target_label: kubernetes_namespace
                - source_labels: [ __meta_kubernetes_pod_name ]
                  action: replace
                  target_label: kubernetes_pod_name
                - target_label: source
                  replacement: 'actuator'
            - job_name: 'kubernetes-pods-otel'
              scrape_interval: 5s
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [ __meta_kubernetes_pod_annotation_otel_prometheus_io_scrape,__meta_kubernetes_pod_container_port_name]
                  separator: '@'
                  action: keep
                  regex: 'true@otel-metrics' #checking scraping enabled for otel and container port belongs to otel agent
                - source_labels: [ __meta_kubernetes_pod_annotation_otel_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                  # replacing __address__ with __instance__ for OTEL collector
                - source_labels: [ __instance__, __meta_kubernetes_pod_annotation_otel_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                - source_labels: [ __meta_kubernetes_namespace ]
                  action: replace
                  target_label: kubernetes_namespace
                - source_labels: [ __meta_kubernetes_pod_name ]
                  action: replace
                  target_label: kubernetes_pod_name
                - target_label: source
                  replacement: 'otel'
    exporters:
      jaeger:
        endpoint: "jaeger:14250"
        tls:
          insecure: true
          insecure_skip_verify: true
      prometheus:
        endpoint: "0.0.0.0:9464"
      logging:
        loglevel: debug
    
    processors:
      batch:
    
    service:
      telemetry:
        logs:
          level: "debug"
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [jaeger]
          processors: [batch]
        metrics:
          receivers: [prometheus]
          exporters: [prometheus]
          processors: [batch]